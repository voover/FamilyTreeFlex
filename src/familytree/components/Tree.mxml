<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:models="familytree.models.*"
		 xmlns:layouts="familytree.components.layouts.*">
	<s:layout>
		<!--<s:BasicLayout />-->
		<layouts:BasicTreeLayout root="{treeRoot}" mode="{mode}" direction="{BasicTreeLayout.UP}" id="myLayout"/>	
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			import familytree.components.UINode;
			import familytree.components.skins.UINodeBaseSkin;
			import familytree.enums.Sex;
			import familytree.events.AddNodeRequestEvent;
			import familytree.models.Node;
			
			import mx.messaging.AbstractConsumer;
			import mx.messaging.errors.NoChannelAvailableError;
			
			import spark.layouts.BasicLayout;
			
			private var _uiNodes:Array = [];
			protected function getUINode(n:Node):UINode {
				return UINodeFactory.get(n);
			}					
					
			protected function addNode(n:Node, withSpouse:Boolean = false):void {
				addElement(UINodeFactory.get(n));
				if (this.mode == BasicTreeLayout.ANCESTRY) {
					if (n.mother) addNode(n.mother, false);
					if (n.father) addNode(n.father, false);
				} else {
					for each(var c:Node in n.children) {
						addNode(c, true);
					}
				}
				if (withSpouse && n.spouse)
					addElement(UINodeFactory.get(n.spouse));
			}
						
			protected override function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
				super.updateDisplayList(unscaledWidth, unscaledHeight);
			//	drawLines();
			}
			
			protected override function commitProperties():void {
				super.commitProperties();
				if(_treeRootChanged) update();
			}
			
			public function update():void {
				if(!treeRoot) return;
				for(var i:int = 0; i < this.numElements; ++i)
					if (this.getElementAt(i) is UINode) {
						this.removeElementAt(i);
						i--;
					}
				addNode(treeRoot, true);
				invalidateDisplayList();	
				_treeRootChanged = false;
			}
			
			private var _treeRoot:Node;
			private var _treeRootChanged:Boolean;
			[Bindable]
			public function set treeRoot(t:Node):void {
				_treeRoot = t;
				_treeRootChanged = true;				
				invalidateProperties();
			}
			public function get treeRoot():Node {
				return _treeRoot;
			}
			
			private var _mode:int = BasicTreeLayout.ANCESTRY;

			[Bindable]
			public function get mode():int
			{
				return _mode;
			}

			public function set mode(value:int):void
			{
				_mode = value;
				myLayout.direction = (value == BasicTreeLayout.ANCESTRY)?BasicTreeLayout.UP : BasicTreeLayout.DOWN;
				_treeRootChanged = true;				
				invalidateProperties();				
			}

			
		]]>
	</fx:Script>
	<fx:Declarations>
	<!--	<models:Node id="treeRoot" />-->
	</fx:Declarations>
	<s:SpriteVisualElement id="lines" />
	<s:Group id="nodes" />	
</s:Group>
